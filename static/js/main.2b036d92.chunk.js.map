{"version":3,"sources":["Interact.js","arith/arith.js","App.js","serviceWorker.js","index.js"],"names":["StyledInteract","styled","div","Header","StyledExpr","StyledDisplay","StyledShow","StyledEditor","props","height","Button","button","Editor","id","Interact","exprEl","useRef","evalEl","compEl","useState","hasEditors","setHasEditors","useEffect","current","CodeFlask","language","addLanguage","updateLanguage","readonly","onClick","code","getCode","trim","parsedCode","tokens","i","peek","consume","parseAtom","test","parseInt","parseCompound","v","c","push","parse","replace","split","updateCode","interpret","tree","op","vals","map","arg","reduce","a","b","compile","toString","args","join","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b036d92.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport CodeFlask from 'codeflask';\nimport { tokenize, parse, interpret, compile } from './arith/arith';\n\nconst StyledInteract = styled.div`\n  display: flex; \n  flex-direction: row;\n  justify-content: space-between;\n  width: 662px;\n  \n  @media screen and (max-width: 600px) {\n    flex-direction: column;\n    width: 100%;\n  }\n`;\n\nconst Header = styled.div`\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 2px solid var(--color-gray-light);\n  font-size: 1.1rem;\n  color: var(--color-blue);\n`;\n\nconst StyledExpr = styled.div`\n  width: 50%;\n  height: 400px;\n  position: relative;\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.16);\n  overflow: hidden;\n  border-radius: 0.8rem;\n\n  @media screen and (max-width: 600px) {\n    width: 100%;\n    height: 250px;\n  }\n`;\n\nconst StyledDisplay = styled.div`\n  width: 42.5%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media screen and (max-width: 600px) {\n    width: 100%;\n    height: 300px;\n  }\n`;\n\nconst StyledShow = styled.div`\n  width: 100%;\n  height: 48%;\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.16);\n  overflow: hidden;\n  border-radius: 0.8rem;\n`;\n\nconst StyledEditor = styled.div`\n  position: relative;\n  width: 100%;\n  height: ${props => props.height || \"80%\"};\n`;\n\nconst Button = styled.button`\n  cursor: pointer;\n  font-weight: bold;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid var(--color-blue);\n  color: var(--color-blue);\n  border-radius: 3px;\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n`;\n\nconst Editor = ({ id, height }) => {\n  return (\n    <StyledEditor id={id} height={height} >\n    </StyledEditor>\n  );\n}\n\nconst Interact = () => {\n  const exprEl = useRef(null);\n  const evalEl = useRef(null);\n  const compEl = useRef(null);\n\n  const [hasEditors, setHasEditors] = useState(false);\n\n  useEffect(() => {\n    if (!hasEditors) { \n\n      exprEl.current = new CodeFlask('#expr', { \n        language: 'js' \n      });\n      exprEl.current.addLanguage('arithjs', {\n        'number': /[0-9]+/,\n        'operator': /[*-+/]/,\n        'punctuation': /[()]/\n      });\n      exprEl.current.updateLanguage('arithjs');\n\n      evalEl.current = new CodeFlask('#eval', { \n        language: 'js', \n        readonly: true\n      });\n\n      compEl.current = new CodeFlask('#comp', { \n        language: 'js', \n        readonly: true\n      });\n\n      setHasEditors(true);\n    }\n\n  }, [hasEditors]);\n\n  const runClick = () => {\n    const code = exprEl.current.getCode().trim();\n    if (!code) return;\n    const parsedCode = parse(tokenize(code));\n    evalEl.current.updateCode(`${interpret(parsedCode)}`);  // to a string\n    compEl.current.updateCode(compile(parsedCode));\n  }\n\n  return (\n    <StyledInteract>\n\n      <StyledExpr>\n        <Header> an arith-js expression </Header>\n        <Editor id=\"expr\" height=\"70%\" />\n        <Button onClick={runClick}>RUN</Button>\n      </StyledExpr>\n\n      <StyledDisplay>\n        <StyledShow>\n          <Header> evaluated value </Header>\n          <Editor id=\"eval\"  />\n        </StyledShow>\n\n        <StyledShow>\n          <Header> compiled js expression </Header>\n          <Editor id=\"comp\"  />\n        </StyledShow>\n      </StyledDisplay>\n\n    </StyledInteract>\n  );\n};\n\nexport default Interact;","// An interpreter and a compiler for an arithmetic \n// language. See README for more detail. \n\nconst tokenize = s => s.replace(/\\(/g, ' ( ')\n                       .replace(/\\)/g, ' ) ')\n                       .trim()\n                       .split(/\\s+/);\n\nconst parse = tokens => {\n\n  let i = 0;\n  const peek = () => tokens[i];\n  const consume = () => tokens[i++];\n  \n  const parseAtom = () => (\n    /^[+*-/]$/.test(peek()) ? consume() : parseInt(consume())\n  );\n\n  const parseCompound = () => {\n    consume();\n    const v = [];\n    let c = peek();\n    while (c != ')') {\n      if (c != '(') {\n        v.push(parseAtom());\n      } else {\n        v.push(parseCompound());\n      }\n      c = peek();\n    }\n    if (c == ')') consume();\n    return v;\n  };\n  return peek() == '(' ? parseCompound() : parseAtom();\n}\n\nconst interpret = tree => {\n  if (typeof tree == 'number') return tree;\n  const [op, ...args] = tree \n  const vals =  args.map(arg => interpret(arg));\n  switch (op) {\n    case '+': return vals.reduce((a,b) => a+b, 0);\n    case '*': return vals.reduce((a,b) => a*b, 1);\n    case '-': return vals.reduce((a,b) => a-b);\n    case '/': return vals.reduce((a,b) => a / b);\n  };\n};\n\nconst compile = tree => {\n  if (typeof tree == 'number') return tree.toString();\n  const [op, ...args] = tree;\n  return `( ${args.map(arg => compile(arg)).join(' ' + op + ' ')} )`;\n};\n\nexport { tokenize, parse, interpret, compile };","import React from 'react';\nimport styled from 'styled-components';\n\nimport Interact from './Interact';\n\nconst StyledApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Header = styled.div`\n  color: var(--color-blue);\n  font-size: 4rem;\n  font-weight: bold;\n  margin: 2em auto;\n\n  @media screen and (max-width: 600px) {\n    margin: 1em auto;\n  }\n`;\n\nfunction App() {\n  return (\n    <StyledApp>\n      <Header> ARITH-JS </Header>\n      <Interact /> \n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}